#ifndef _Generator2PriceControllerBase_
#define _Generator2PriceControllerBase_

// This code has been generated by the C2W code generator.
// Do not edit manually!

#include <vector>

#include "SynchronizedFederate.hpp"
#include "SubscribedInteractionFilter.hpp"


#include "GridlabDInput.hpp"
#include "GridlabDOutput.hpp"

#include "C2WLogger.hpp"

class Generator2PriceControllerBase : public SynchronizedFederate {

public:
	typedef SynchronizedFederate Super;
	

	typedef std::vector< std::string > ArgVector;
	
	static double getLookAhead( void ) {
		static double lookAhead = 0.2;
		return lookAhead;
	}

	virtual ~Generator2PriceControllerBase( void )
	 throw (RTI::FederateInternalError) { }

private:
	SubscribedInteractionFilter _subscribedInteractionFilter;

protected:
	void init( ArgVector argVector ) {

		createRTI();
		joinFederation( argVector[ 0 ], argVector[ 1 ] );
		
		std::string loglevel="";
		ArgVector loggerArgVector;
		if ( argVector.size() == 3 ) {
			loggerArgVector.push_back( argVector[ 2 ] );
		} else if ( argVector.size() > 3 ) {
			loggerArgVector.push_back( argVector[ 3 ] );
		}
		_logger->init(loggerArgVector);
		
		if ( argVector.size() == 5 ) {
			loglevel = argVector[ 4 ];
		}
			

		enableTimeConstrained();



		enableTimeRegulation( getLookAhead() );



		enableAsynchronousDelivery();



        // interaction pubsub
        
        
        GridlabDInput::publish( getRTI() );
          
          
        GridlabDOutput::subscribe( getRTI() );
		_subscribedInteractionFilter.setFedFilters( GridlabDOutput::get_handle(), SubscribedInteractionFilter::ORIGIN_FILTER_DISABLED, SubscribedInteractionFilter::MAPPER );  
		
		// object pubsub
        
          

         
          
   
        
         // enable pubsub log
         if( argVector.size() > 2 ){
			
			
			GridlabDInput::enablePublishLog("GridlabDInput", "Generator2PriceController", "NORMAL", loglevel);  
			
			
			GridlabDOutput::enableSubscribeLog("GridlabDOutput", "Generator2PriceController", "NORMAL", loglevel);  
			
			  
			
			  
		}

	}

	void init( int argc, char *argv[] ) {
		ArgVector argVector;
		for( int ix = 1 ; ix < argc ; ++ix ) argVector.push_back( argv[ ix ] );
		init( argVector );
	}
	
	void init( const std::string &federation_id, const std::string &federate_id ) {
		ArgVector argVector;
		argVector.push_back( federation_id );
		argVector.push_back( federate_id );
		init( argVector );
	}
	
public:	
	// default constructor
	Generator2PriceControllerBase( void ) { }
	
	// constructor
	Generator2PriceControllerBase( const std::string &federation_id, const std::string &federate_id ) { init( federation_id, federate_id ); }

	// constructor	
	Generator2PriceControllerBase( int argc, char *argv[] ) { init( argc, argv ); }

	
	
	GridlabDInputSP create_GridlabDInput( void ) {
	   GridlabDInputSP interactionSP = GridlabDInput::create();
	   interactionSP->set_sourceFed( getFederateId() );
	   interactionSP->set_originFed( getFederateId() );
	   return interactionSP;
	}  

    
    virtual void receiveInteraction(
	 RTI::InteractionClassHandle theInteraction,
	 const RTI::ParameterHandleValuePairSet& theParameters,
	 const RTI::FedTime& theTime,
	 const char *theTag,
	 RTI::EventRetractionHandle theHandle
	)
	 throw ( RTI::InteractionClassNotKnown, RTI::InteractionParameterNotKnown, RTI::InvalidFederationTime, RTI::FederateInternalError) {

		if ( getMoreATRs() ) {
			InteractionRoot::SP interactionRootSP = InteractionRoot::create_interaction( theInteraction, theParameters, theTime );
			C2WInteractionRootSP c2wInteractionRootSP = boost::dynamic_pointer_cast< C2WInteractionRoot >( interactionRootSP );
			if ( c2wInteractionRootSP != 0 ) {

	            // Filter interaction if src/origin fed requirements (if any) are not met
	            if (  _subscribedInteractionFilter.filterC2WInteraction( getFederateId(), c2wInteractionRootSP )  ) {
	            	return;
	            }
	        }

	        Super::receiveInteraction( theInteraction, theParameters, theTime, theTag, theHandle );
	    }
	}

	virtual void receiveInteraction(
	 RTI::InteractionClassHandle theInteraction,
	 const RTI::ParameterHandleValuePairSet& theParameters,
	 const char *theTag
	)
	 throw ( RTI::InteractionClassNotKnown, RTI::InteractionParameterNotKnown, RTI::FederateInternalError) {
		if ( getMoreATRs() ) {
			InteractionRoot::SP interactionRootSP = InteractionRoot::create_interaction( theInteraction, theParameters );
			C2WInteractionRootSP c2wInteractionRootSP = boost::dynamic_pointer_cast< C2WInteractionRoot >( interactionRootSP );
			if ( c2wInteractionRootSP != 0 ) {

	            // Filter interaction if src/origin fed requirements (if any) are not met
	            if (  _subscribedInteractionFilter.filterC2WInteraction( getFederateId(), c2wInteractionRootSP )  ) {
	            	return;
	            }
	        }

			Super::receiveInteraction( theInteraction, theParameters, theTag );
		}
	}
};

#endif

