
// This code has been generated by the C2W code generator.
// Do not edit manually!

#include "StartIntegrityFirewall.hpp"




void StartIntegrityFirewall::init( RTI::RTIambassador *rti ) {
	static bool isInitialized = false;
	if ( isInitialized ) {
		return;
	}
	isInitialized = true;

	OmnetCommand::init( rti );

	bool isNotInitialized = true;
	while( isNotInitialized ) {
		try {
			getHandle() = rti->getInteractionClassHandle( "InteractionRoot.C2WInteractionRoot.ActionBase.OmnetCommand.StartIntegrityFirewall" );
			isNotInitialized = false;
		} catch ( RTI::FederateNotExecutionMember & ) {
			std::cerr << getInitErrorMessage() << "Federate Not Execution Member" << std::endl;
			return;				
		} catch ( RTI::NameNotFound & ) {
			std::cerr << getInitErrorMessage() << "Name Not Found" << std::endl;
			return;				
		} catch ( ... ) {
			std::cerr << getInitErrorMessage() << "Exception caught ... retry" << std::endl;
		}
	}

	getClassNameHandleMap().insert(  std::make_pair( "StartIntegrityFirewall", get_handle() )  );
	getClassHandleNameMap().insert(  std::make_pair( get_handle(), "StartIntegrityFirewall" )  );


	isNotInitialized = true;
	while( isNotInitialized ) {
		try {		
			
			
			get_nodeFullPath_handle_var() = rti->getParameterHandle( "nodeFullPath", get_handle() );
			get_intMultiplier_handle_var() = rti->getParameterHandle( "intMultiplier", get_handle() );
			get_doubleAdder_handle_var() = rti->getParameterHandle( "doubleAdder", get_handle() );
			get_booleanEnableFlip_handle_var() = rti->getParameterHandle( "booleanEnableFlip", get_handle() );
			get_longMultiplier_handle_var() = rti->getParameterHandle( "longMultiplier", get_handle() );
			get_doubleMultiplier_handle_var() = rti->getParameterHandle( "doubleMultiplier", get_handle() );
			get_stringReplacement_handle_var() = rti->getParameterHandle( "stringReplacement", get_handle() );
			get_longAdder_handle_var() = rti->getParameterHandle( "longAdder", get_handle() );
			get_intAdder_handle_var() = rti->getParameterHandle( "intAdder", get_handle() );
			isNotInitialized = false;
		} catch ( RTI::FederateNotExecutionMember & ) {
			std::cerr << getInitErrorMessage() << "Federate Not Execution Member" << std::endl;
			return;				
		} catch ( RTI::InteractionClassNotDefined & ) {
			std::cerr << getInitErrorMessage() << "Interaction Class Not Defined" << std::endl;
			return;				
		} catch ( RTI::NameNotFound & ) {
			std::cerr << getInitErrorMessage() << "Name Not Found" << std::endl;
			return;				
		} catch ( ... ) {
			std::cerr << getInitErrorMessage() << "Exception caught ... retry" << std::endl;
		}
	}
	
	
	getDatamemberNameHandleMap().insert(  std::make_pair( "StartIntegrityFirewall,nodeFullPath", get_nodeFullPath_handle() )  );
	
	getDatamemberHandleNameMap().insert(  std::make_pair( get_nodeFullPath_handle(), "nodeFullPath" )  );
	
	getDatamemberTypeMap().insert( std::make_pair("nodeFullPath", "String") );
	
	
	getDatamemberNameHandleMap().insert(  std::make_pair( "StartIntegrityFirewall,intMultiplier", get_intMultiplier_handle() )  );
	
	getDatamemberHandleNameMap().insert(  std::make_pair( get_intMultiplier_handle(), "intMultiplier" )  );
	
	getDatamemberTypeMap().insert( std::make_pair("intMultiplier", "int") );
	
	
	getDatamemberNameHandleMap().insert(  std::make_pair( "StartIntegrityFirewall,doubleAdder", get_doubleAdder_handle() )  );
	
	getDatamemberHandleNameMap().insert(  std::make_pair( get_doubleAdder_handle(), "doubleAdder" )  );
	
	getDatamemberTypeMap().insert( std::make_pair("doubleAdder", "double") );
	
	
	getDatamemberNameHandleMap().insert(  std::make_pair( "StartIntegrityFirewall,booleanEnableFlip", get_booleanEnableFlip_handle() )  );
	
	getDatamemberHandleNameMap().insert(  std::make_pair( get_booleanEnableFlip_handle(), "booleanEnableFlip" )  );
	
	getDatamemberTypeMap().insert( std::make_pair("booleanEnableFlip", "boolean") );
	
	
	getDatamemberNameHandleMap().insert(  std::make_pair( "StartIntegrityFirewall,longMultiplier", get_longMultiplier_handle() )  );
	
	getDatamemberHandleNameMap().insert(  std::make_pair( get_longMultiplier_handle(), "longMultiplier" )  );
	
	getDatamemberTypeMap().insert( std::make_pair("longMultiplier", "long") );
	
	
	getDatamemberNameHandleMap().insert(  std::make_pair( "StartIntegrityFirewall,doubleMultiplier", get_doubleMultiplier_handle() )  );
	
	getDatamemberHandleNameMap().insert(  std::make_pair( get_doubleMultiplier_handle(), "doubleMultiplier" )  );
	
	getDatamemberTypeMap().insert( std::make_pair("doubleMultiplier", "double") );
	
	
	getDatamemberNameHandleMap().insert(  std::make_pair( "StartIntegrityFirewall,stringReplacement", get_stringReplacement_handle() )  );
	
	getDatamemberHandleNameMap().insert(  std::make_pair( get_stringReplacement_handle(), "stringReplacement" )  );
	
	getDatamemberTypeMap().insert( std::make_pair("stringReplacement", "String") );
	
	
	getDatamemberNameHandleMap().insert(  std::make_pair( "StartIntegrityFirewall,longAdder", get_longAdder_handle() )  );
	
	getDatamemberHandleNameMap().insert(  std::make_pair( get_longAdder_handle(), "longAdder" )  );
	
	getDatamemberTypeMap().insert( std::make_pair("longAdder", "long") );
	
	
	getDatamemberNameHandleMap().insert(  std::make_pair( "StartIntegrityFirewall,intAdder", get_intAdder_handle() )  );
	
	getDatamemberHandleNameMap().insert(  std::make_pair( get_intAdder_handle(), "intAdder" )  );
	
	getDatamemberTypeMap().insert( std::make_pair("intAdder", "int") );
	

}

void StartIntegrityFirewall::publish( RTI::RTIambassador *rti ) {
	if ( getIsPublished() ) {
		return;
	}

	init( rti );



	bool isNotPublished = true;
	while( isNotPublished ) {
		try {
			rti->publishInteractionClass( get_handle() );
			isNotPublished = false;
		} catch ( RTI::FederateNotExecutionMember & ) {
			std::cerr << getPublishErrorMessage() << "Federate Not Execution Member" << std::endl;
			return;
		} catch ( RTI::InteractionClassNotDefined & ) {
			std::cerr << getPublishErrorMessage() << "Interaction Class Not Defined" << std::endl;
			return;
		} catch ( ... ) {
			std::cerr << getPublishErrorMessage() << "Exception caught ... retry" << std::endl;
		}
	}

	getIsPublished() = true;
}

void StartIntegrityFirewall::unpublish( RTI::RTIambassador *rti ) {
	if ( !getIsPublished() ) {
		return;
	}

	init( rti );

	bool isNotUnpublished = true;
	while( isNotUnpublished ) {
		try {
			rti->unpublishInteractionClass( get_handle() );
			isNotUnpublished = false;
		} catch ( RTI::FederateNotExecutionMember & ) {
			std::cerr << getUnpublishErrorMessage() + "Federate Not Execution Member" << std::endl;
			return;
		} catch ( RTI::InteractionClassNotDefined & ) {
			std::cerr << getUnpublishErrorMessage() + "Interaction Class Not Defined" << std::endl;
			return;
		} catch ( RTI::InteractionClassNotPublished & ) {
			std::cerr << getUnpublishErrorMessage() + "Interaction Class Not Published" << std::endl;
			return;
		} catch ( ... ) {
			std::cerr << getUnpublishErrorMessage() << "Exception caught ... retry" << std::endl;
		}
	}

	getIsPublished() = false;
}

void StartIntegrityFirewall::subscribe( RTI::RTIambassador *rti ) {
	if ( getIsSubscribed() ) {
		return;
	}

	init( rti );

	
	bool isNotSubscribed = true;
	while( isNotSubscribed ) {
		try {
			rti->subscribeInteractionClass( get_handle() );
			isNotSubscribed = false;
		} catch ( RTI::FederateNotExecutionMember & ) {
			std::cerr << getSubscribeErrorMessage() << "Federate Not Execution Member" << std::endl;
			return;
		} catch ( RTI::InteractionClassNotDefined & ) {
			std::cerr << getSubscribeErrorMessage() << "Interaction Class Not Defined" << std::endl;
			return;
		} catch ( ... ) {
			std::cerr << getSubscribeErrorMessage() << "Exception caught ... retry" << std::endl;
		}
	}

	getIsSubscribed() = true;
}
	
void StartIntegrityFirewall::unsubscribe( RTI::RTIambassador *rti ) {
	if ( !getIsSubscribed() ) {
		return;
	}

	init( rti );
	
	bool isNotUnsubscribed = true;
	while( isNotUnsubscribed ) {
		try {
			rti->unsubscribeInteractionClass( get_handle() );
			isNotUnsubscribed = false;
		} catch ( RTI::FederateNotExecutionMember & ) {
			std::cerr << getUnsubscribeErrorMessage() << "Federate Not Execution Member" << std::endl;
			return;
		} catch ( RTI::InteractionClassNotDefined & ) {
			std::cerr << getUnsubscribeErrorMessage() << "Interaction Class Not Defined" << std::endl;
			return;
		} catch ( RTI::InteractionClassNotSubscribed & ) {
			std::cerr << getUnsubscribeErrorMessage() << "Interaction Class Not Subscribed" << std::endl;
			return;
		} catch ( ... ) {
			std::cerr << getUnsubscribeErrorMessage() << "Exception caught ... retry" << std::endl;
		}
	}

	getIsSubscribed() = false;
}

bool StartIntegrityFirewall::static_init( void ) {
	static bool isInitialized = false;
	if ( isInitialized ) {
		return true;
	}
	isInitialized = true;
	
	getClassNameSet().insert( "StartIntegrityFirewall" );
	
	getClassNameFactoryMap().insert(  std::make_pair( "StartIntegrityFirewall", &StartIntegrityFirewall::factory )  );
	getClassNamePublishMap().insert(   std::make_pair(  "StartIntegrityFirewall", (PubsubFunctionPtr)( &StartIntegrityFirewall::publish )  )   );
	getClassNameUnpublishMap().insert(   std::make_pair(  "StartIntegrityFirewall", (PubsubFunctionPtr)( &StartIntegrityFirewall::unpublish )  )   );
	getClassNameSubscribeMap().insert(   std::make_pair(  "StartIntegrityFirewall", (PubsubFunctionPtr)( &StartIntegrityFirewall::subscribe )  )   );
	getClassNameUnsubscribeMap().insert(   std::make_pair(  "StartIntegrityFirewall", (PubsubFunctionPtr)( &StartIntegrityFirewall::unsubscribe )  )   );

	getDatamemberClassNameVectorPtrMap().insert(  std::make_pair( "StartIntegrityFirewall", &getDatamemberNames() )  );
	getAllDatamemberClassNameVectorPtrMap().insert(  std::make_pair( "StartIntegrityFirewall", &getAllDatamemberNames() )  );
	
	
	
	getDatamemberNames().push_back( "nodeFullPath" );
	getDatamemberNames().push_back( "intMultiplier" );
	getDatamemberNames().push_back( "doubleAdder" );
	getDatamemberNames().push_back( "booleanEnableFlip" );
	getDatamemberNames().push_back( "longMultiplier" );
	getDatamemberNames().push_back( "doubleMultiplier" );
	getDatamemberNames().push_back( "stringReplacement" );
	getDatamemberNames().push_back( "longAdder" );
	getDatamemberNames().push_back( "intAdder" );
	
	
	getAllDatamemberNames().push_back( "nodeFullPath" );
	getAllDatamemberNames().push_back( "intMultiplier" );
	getAllDatamemberNames().push_back( "doubleAdder" );
	getAllDatamemberNames().push_back( "booleanEnableFlip" );
	getAllDatamemberNames().push_back( "longMultiplier" );
	getAllDatamemberNames().push_back( "doubleMultiplier" );
	getAllDatamemberNames().push_back( "stringReplacement" );
	getAllDatamemberNames().push_back( "longAdder" );
	getAllDatamemberNames().push_back( "intAdder" );



	return true;
}

std::ostream &operator<<( std::ostream &os, StartIntegrityFirewall::SP entitySP ) {
	return os << *entitySP;
}
std::ostream &operator<<( std::ostream &os, const StartIntegrityFirewall &entity ) {
	return os << "StartIntegrityFirewall("  << "nodeFullPath:" << entity.get_nodeFullPath() << ", " << "intMultiplier:" << entity.get_intMultiplier() << ", " << "doubleAdder:" << entity.get_doubleAdder() << ", " << "sourceFed:" << entity.get_sourceFed() << ", " << "uniqueCommandID:" << entity.get_uniqueCommandID() << ", " << "booleanEnableFlip:" << entity.get_booleanEnableFlip() << ", " << "longMultiplier:" << entity.get_longMultiplier() << ", " << "doubleMultiplier:" << entity.get_doubleMultiplier() << ", " << "originFed:" << entity.get_originFed() << ", " << "stringReplacement:" << entity.get_stringReplacement() << ", " << "longAdder:" << entity.get_longAdder() << ", " << "intAdder:" << entity.get_intAdder() << ", " << "federateFilter:" << entity.get_federateFilter() << ", " << "actualLogicalGenerationTime:" << entity.get_actualLogicalGenerationTime()	<< ")";
}





StartIntegrityFirewall::ParameterHandleValuePairSetSP StartIntegrityFirewall::createDatamemberHandleValuePairSet( RTI::ULong count ) {
	ParameterHandleValuePairSetSP datamembers = Super::createDatamemberHandleValuePairSet( count + 9 );

	std::string stringConversion;
		

	
	
	stringConversion = static_cast< std::string >(  TypeMedley( get_nodeFullPath() )  );
	datamembers->add( get_nodeFullPath_handle(), stringConversion.c_str(), stringConversion.size() );
	
	stringConversion = static_cast< std::string >(  TypeMedley( get_intMultiplier() )  );
	datamembers->add( get_intMultiplier_handle(), stringConversion.c_str(), stringConversion.size() );
	
	stringConversion = static_cast< std::string >(  TypeMedley( get_doubleAdder() )  );
	datamembers->add( get_doubleAdder_handle(), stringConversion.c_str(), stringConversion.size() );
	
	stringConversion = static_cast< std::string >(  TypeMedley( get_booleanEnableFlip() )  );
	datamembers->add( get_booleanEnableFlip_handle(), stringConversion.c_str(), stringConversion.size() );
	
	stringConversion = static_cast< std::string >(  TypeMedley( get_longMultiplier() )  );
	datamembers->add( get_longMultiplier_handle(), stringConversion.c_str(), stringConversion.size() );
	
	stringConversion = static_cast< std::string >(  TypeMedley( get_doubleMultiplier() )  );
	datamembers->add( get_doubleMultiplier_handle(), stringConversion.c_str(), stringConversion.size() );
	
	stringConversion = static_cast< std::string >(  TypeMedley( get_stringReplacement() )  );
	datamembers->add( get_stringReplacement_handle(), stringConversion.c_str(), stringConversion.size() );
	
	stringConversion = static_cast< std::string >(  TypeMedley( get_longAdder() )  );
	datamembers->add( get_longAdder_handle(), stringConversion.c_str(), stringConversion.size() );
	
	stringConversion = static_cast< std::string >(  TypeMedley( get_intAdder() )  );
	datamembers->add( get_intAdder_handle(), stringConversion.c_str(), stringConversion.size() );
	

	return datamembers;
}

