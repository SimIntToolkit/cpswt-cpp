// This code has been generated by the C2W code generator.
// Do not edit manually!

package MapperEx;

import hla.rti.EventRetractionHandle;
import hla.rti.LogicalTime;
import hla.rti.ReceivedInteraction;

import c2w.hla.C2WInteractionRoot;
import c2w.hla.C2WLogger;
import c2w.hla.InteractionRoot;
import c2w.hla.SubscribedInteractionFilter;
import c2w.hla.SynchronizedFederate;


import c2w.hla.*;

public class DirectMapperBase extends SynchronizedFederate {

	private SubscribedInteractionFilter _subscribedInteractionFilter = new SubscribedInteractionFilter();
	
	// constructor
	public DirectMapperBase( String federation_id, String federate_id ) throws Exception {
	
		setLookahead( 0.2 );
		createRTI();
		joinFederation( federation_id, federate_id );

		enableTimeConstrained();

		enableTimeRegulation( getLookahead() );
		enableAsynchronousDelivery();
        // interaction pubsub
        
        Hello.publish( getRTI() );
        Bonjour.publish( getRTI() );
        Namaste.publish( getRTI() );
        
        Namaste.subscribe( getRTI() );
        _subscribedInteractionFilter.setFedFilters( 
			Namaste.get_handle(), 
			SubscribedInteractionFilter.OriginFedFilter.NON_SELF, 
			SubscribedInteractionFilter.SourceFedFilter.NON_MAPPER 
		);
        Hello.subscribe( getRTI() );
        _subscribedInteractionFilter.setFedFilters( 
			Hello.get_handle(), 
			SubscribedInteractionFilter.OriginFedFilter.NON_SELF, 
			SubscribedInteractionFilter.SourceFedFilter.NON_MAPPER 
		);
        Bonjour.subscribe( getRTI() );
        _subscribedInteractionFilter.setFedFilters( 
			Bonjour.get_handle(), 
			SubscribedInteractionFilter.OriginFedFilter.NON_SELF, 
			SubscribedInteractionFilter.SourceFedFilter.NON_MAPPER 
		);		
		// object pubsub
                        }
        
       // constructor
	public DirectMapperBase(  String[] federationInfo ) throws Exception {

		setLookahead( 0.2 );
		createRTI();
		joinFederation( federationInfo[ 0 ], federationInfo[ 1 ] );

		String loglevel = null;
		if(federationInfo.length == 3)
			C2WLogger.init( federationInfo[ 2 ] );
		else if(federationInfo.length > 3)
			C2WLogger.init( federationInfo[ 2 ], federationInfo[ 3 ] );		
		
		if(federationInfo.length == 5)
			loglevel = federationInfo[ 4 ];

		enableTimeConstrained();
		enableTimeRegulation( getLookahead() );
		enableAsynchronousDelivery();

        // interaction pubsub

        Hello.publish( getRTI() );
        Bonjour.publish( getRTI() );
        Namaste.publish( getRTI() );

        Namaste.subscribe( getRTI() );
        _subscribedInteractionFilter.setFedFilters( 
			Namaste.get_handle(), 
			SubscribedInteractionFilter.OriginFedFilter.NON_SELF, 
			SubscribedInteractionFilter.SourceFedFilter.NON_MAPPER 
		);
        Hello.subscribe( getRTI() );
        _subscribedInteractionFilter.setFedFilters( 
			Hello.get_handle(), 
			SubscribedInteractionFilter.OriginFedFilter.NON_SELF, 
			SubscribedInteractionFilter.SourceFedFilter.NON_MAPPER 
		);
        Bonjour.subscribe( getRTI() );
        _subscribedInteractionFilter.setFedFilters( 
			Bonjour.get_handle(), 
			SubscribedInteractionFilter.OriginFedFilter.NON_SELF, 
			SubscribedInteractionFilter.SourceFedFilter.NON_MAPPER 
		);		// object pubsub
                		// enable pubsub log
		if(federationInfo.length  > 2) {
			
			Hello.enablePublishLog(
				"Hello",
				"DirectMapper",
				"undefined",
				loglevel);
			Bonjour.enablePublishLog(
				"Bonjour",
				"DirectMapper",
				"undefined",
				loglevel);
			Namaste.enablePublishLog(
				"Namaste",
				"DirectMapper",
				"undefined",
				loglevel);
			
			Namaste.enableSubscribeLog(
				"Namaste",
				"DirectMapper", 
				"undefined", 
				loglevel);
			Hello.enableSubscribeLog(
				"Hello",
				"DirectMapper", 
				"undefined", 
				loglevel);
			Bonjour.enableSubscribeLog(
				"Bonjour",
				"DirectMapper", 
				"undefined", 
				loglevel);	
			
			
		}
		
	}
	
	public Hello create_Hello() {
	   Hello interaction = new Hello();
	   interaction.set_sourceFed( getFederateId() );
	   interaction.set_originFed( getFederateId() );
	   return interaction;
	}
	public Bonjour create_Bonjour() {
	   Bonjour interaction = new Bonjour();
	   interaction.set_sourceFed( getFederateId() );
	   interaction.set_originFed( getFederateId() );
	   return interaction;
	}
	public Namaste create_Namaste() {
	   Namaste interaction = new Namaste();
	   interaction.set_sourceFed( getFederateId() );
	   interaction.set_originFed( getFederateId() );
	   return interaction;
	}
	@Override
	public void receiveInteraction(
	 int interactionClass, ReceivedInteraction theInteraction, byte[] userSuppliedTag
	) {
		InteractionRoot interactionRoot = InteractionRoot.create_interaction( interactionClass, theInteraction );
		if ( interactionRoot instanceof C2WInteractionRoot ) {
			
			C2WInteractionRoot c2wInteractionRoot = (C2WInteractionRoot)interactionRoot;

	        // Filter interaction if src/origin fed requirements (if any) are not met
	        if (  _subscribedInteractionFilter.filterC2WInteraction( getFederateId(), c2wInteractionRoot )  ) {
	        	return;
	        } 
		}
		
		super.receiveInteraction( interactionClass, theInteraction, userSuppliedTag );			
	}

	@Override
	public void receiveInteraction(
	 int interactionClass,
	 ReceivedInteraction theInteraction,
	 byte[] userSuppliedTag,
	 LogicalTime theTime,
	 EventRetractionHandle retractionHandle
	) {
		InteractionRoot interactionRoot = InteractionRoot.create_interaction( interactionClass, theInteraction, theTime );
		if ( interactionRoot instanceof C2WInteractionRoot ) {

			C2WInteractionRoot c2wInteractionRoot = (C2WInteractionRoot)interactionRoot;

	        // Filter interaction if src/origin fed requirements (if any) are not met
	        if (  _subscribedInteractionFilter.filterC2WInteraction( getFederateId(), c2wInteractionRoot )  ) {
	        	return;
	        } 
		}

		super.receiveInteraction( interactionClass, theInteraction, userSuppliedTag, theTime, retractionHandle );			
	}
}
